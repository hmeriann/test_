name: Build and Process

on:
  workflow_dispatch:

jobs:
  define-matrix:
    name: Define Initial Matrix
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.set-matrix.outputs.branches }}

    steps:
      - id: set-matrix
        run: |
          echo "branches=['main', 'feature']" >> "$GITHUB_OUTPUT"

  build:
    name: Build and Copy Branches
    needs: define-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: ${{ fromJSON(needs.define-matrix.outputs.branches) }}
    outputs:
      successful_builds: ${{ steps.copy-branches.outputs.successful_builds }}

    steps:
      - name: Simulate Build
        id: build-step
        run: |
          echo "Building branch: ${{ matrix.branch }}"
          # Simulate build process (no conditions needed)
          echo "Build completed for branch: ${{ matrix.branch }}"

      - name: Copy Branches
        id: copy-branches
        if: ${{ steps.build-step.outcome == 'success' }}
        run: |
          # echo successful_builds=$(jq -n --arg branch ${{ matrix.branch }} '[$branch]') >> $GITHUB_OUTPUT
          current_array='[]'
          updated_array=$(jq --arg value ${{ matrix.branch }} '. += [$value]' <<< "$current_array")
          echo "Updated array: $updated_array"
          repository='{ "successful_builds": [ $updated_array ] }'
          echo "branch=$repository" >> "$GITHUB_OUTPUT"

  run-tests:
    name: Run Tests on Copied Branches
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: ${{ fromJSON(needs.build.outputs.successful_builds) }}

    steps:
      - name: Output Branches
        run: |
          echo "Branch: ${{ matrix.branch }}"
