name: test if always
on:
  workflow_dispatch:

jobs:
  define-matrix:
    name: Define matrix
    runs-on: ubuntu-latest
    outputs:
      branches: ${{steps.branches.outputs.branches}}
    steps:
      - id: branches
        run: echo 'branches=["main", "feature"]' >> $GITHUB_OUTPUT
      - run: echo $branches 🥵

  build:
    name: Build DuckDB versions and link the benchmarks
    needs: 
      - define-matrix
    strategy:
      matrix:
        branch: ${{ fromJSON(needs.define-matrix.outputs.branches) }}
      fail-fast: false
    runs-on: ubuntu-latest
    outputs: 
      failed_build: ${{ steps.success.outputs.failed_build }}
    steps:
      - name: Pretend like failing build on feature
        id: fake
        run: |
          if [ ${{ matrix.branch }} == "feature" ]; then
            exit 1
          else
            echo ${{ matrix.branch }} 🦑
          fi
          # - run: exit 1
      - id: success
        shell: bash
        if: ${{ job.status != 'success' }}
        run: |
          echo "failed_build=${{ matrix.branch }}" >> $GITHUB_OUTPUT
      # - id: success
      #   shell: bash
      #   if: always()
      #   run: |
      #     if [ ${{ steps.fake.outcome }} == failure ]; then
      #       echo "failed_build=${{ matrix.branch }}" >> $GITHUB_OUTPUT
      #     fi
      - name: echo
        if: always()
        run: echo $failed_build

  debug:
    name: Debug
    if: always()
    runs-on: ubuntu-latest
    needs: 
      - define-matrix
      - build
    steps:
      - run: echo ${{ needs.build.outputs.failed_build }} 🐠
    
  run-tests:
    name: Run Regression Tests
    # if: success() - will skip all other tests if one fails
    if: always()
    needs: 
      - define-matrix
      - build
      - debug
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJSON(needs.define-matrix.outputs.branches) }}
        test: ['large/tpch.csv', 'tpcds.csv', 'large/ingestion.csv', 'micro_extended.csv']
        exclude:
          - branch: ${{ needs.build.outputs.failed_build }}
    outputs:
      file_name: ${{ steps.create.outputs.file_name }}
        
    steps:    
      - name: Run Regression Test
        continue-on-error: true
        shell: bash
        run: |
          echo TEST: ${{ matrix.test }}
          
      - name: Upload results
        if: success()
        run: echo UPLOAD FILE ${{ steps.create.outputs.file_name }}
  
  file-issue:
    name: File Issue
    needs: 
      - define-matrix
      - build
      - run-tests
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: File issue on preparation steps
        if: contains(github.ref_name, 'main') && (needs.define-matrix.result != 'success' || 
            needs.build.result != 'success')
        run: |
          echo PREP STEP ISSUE

      - name: File issue on Benchmarks
        if: contains(github.ref_name, 'main')
        run: |
          # get versions
          echo GET VERSIONS

          # collect failures on benchmarks runs
          echo REGRESSION DETECTED >> issue_body.txt
      
          if grep -q "REGRESSIONS DETECTED" issue_body.txt; then
            echo "Regressions detected, GitHub issue will be filed."
            # create issue
            echo CREATE ISSUE ✅
            # notify next run that it should not update duckdb-old-${{ matrix.branch }}
            echo "touch ~/previous_failed_${{ matrix.branch }}.txt"
          else
            echo "No regressions detected"
            echo "rm -f ~/previous_failed_${{ matrix.branch }}.txt"
          fi

