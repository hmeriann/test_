name: Test Nightly Builds Check (Reusable)
on:
  workflow_call:
    inputs:
      nightly-build:
        required: true
        type: string
      platform: 
        required: false
        type: string
      architecture: 
        required: false
        type: string
      runs-on:
        required: true
        type: string
      extension:
        required: false
        type: string
env:
  GH_TOKEN: ${{ github.token }}
jobs:
  get-matrix:
    runs-on: ubuntu-latest
    outputs:
      extensions: ${{ steps.ex.outputs.extensions }}
    steps:
      - name: Checkout the repo with the script
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: actions/checkout@v4
        with:
          repository: duckdb/duckdb
          sparse-checkout: |
            .github/config
          path: ext
      - name: save to GITHUB_OUTPUT
        id: ex
        shell: bash
        run: |
            chmod +x scripts/find_extensions.py
            matches=$(python scripts/find_extensions.py ext/.github/config/out_of_tree_extensions.cmake)
              echo "extensions=$matches" >> $GITHUB_OUTPUT

  check-build:
    runs-on: ${{ inputs.runs-on }}
    continue-on-error: true
    needs: get-matrix
    strategy:
      matrix:
        extensions: ${{ fromJSON(needs.get-matrix.outputs.extensions) }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/aarch64
        if: ${{ inputs.architecture == 'linux-aarch64' }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install qemu dependencies
        if: ${{ inputs.architecture == 'linux-aarch64' }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y libc6-arm64-cross qemu-user-static

      - name: Download artifact 
        uses: actions/download-artifact@v4
        with:
          name: duckdb_cli-${{ inputs.architecture }}

      - name: Test ${{ inputs.nightly-build }}
        shell: bash
        run: |
          unzip duckdb_cli-${{ inputs.architecture }}.zip
          if [[ ${{ inputs.nightly-build }} == Windows ]]; then
            duckdb=./duckdb.exe
          else
            duckdb=./duckdb
          fi

          if [[ ${{ inputs.architecture == 'linux-aarch64' }} ]]; then
            docker run --rm --platform linux/aarch64 -v $(pwd):/duckdb -e ext=${{ matrix.extensions }} -e duckdb=$duckdb ubuntu:22.04 /bin/bash -c 'cd /duckdb; ./duckdb -line -c "select installed from duckdb_extensions() where extension_name='\''${ext}'\'';"' > sp.csv
          else
            $duckdb -line -c "select installed from duckdb_extensions() where extension_name='${{ matrix.extensions }}';"
            $duckdb -line -c "select installed from duckdb_extensions() where extension_name='${{ matrix.extensions }}';" > sp.csv
          fi
          cat sp.csv

          sp=$(tail -n 1 sp.csv | awk '{ print $3 }')
          if [[ $sp == 'false' ]]; then
            echo Installing ${{ matrix.extensions }} extension...
            if [[ ${{ inputs.architecture == 'linux-aarch64' }} ]]; then
              if ! docker run --rm --platform linux/aarch64 -v $(pwd):/duckdb -e ext=${{ matrix.extensions }} -e duckdb=$duckdb ubuntu:22.04 /bin/bash -c '$duckdb -c "INSTALL $ext;"'; then 
                echo Failed to install ${{ matrix.extensions }} extension.
                echo "- \`${{ inputs.architecture }}\`: **Failed** to install \`${{ matrix.extensions }}\` extension." >> issue_body_${{ inputs.architecture }}_${{ matrix.extensions }}.txt
                echo "" >> issue_body_${{ inputs.architecture }}_${{ matrix.extensions }}.txt
                exit 1
            else
              $duckdb -line -c "select installed from duckdb_extensions() where extension_name='${{ matrix.extensions }}';"
              $duckdb -line -c "select installed from duckdb_extensions() where extension_name='${{ matrix.extensions }}';" > sp.csv
            fi
            
            if docker run --rm --platform linux/aarch64 -v $(pwd):/duckdb -e ext=${{ matrix.extensions }} -e duckdb=$duckdb ubuntu:22.04 /bin/bash -c '$duckdb -c "INSTALL $ext;"'; then 
              echo ${{ matrix.extensions }} extension is installed.
            else
              
            fi
            echo Loading ${{ matrix.extensions }} extension...
            if docker run --rm --platform linux/aarch64 -v $(pwd):/duckdb -e ext=${{ matrix.extensions }} -e duckdb=$duckdb ubuntu:22.04 /bin/bash -c '$duckdb -c "LOAD $ext;"'; then
              echo ${{ matrix.extensions }} extension is loaded.
            else
              echo Failed to load ${{ matrix.extensions }} extension.
              echo "- \`${{ inputs.architecture }}\`: **Failed** to load the extension \`${{ matrix.extensions }}\`." >> issue_body_${{ inputs.architecture }}_${{ matrix.extensions }}.txt
              echo "" >> issue_body_${{ inputs.architecture }}_${{ matrix.extensions }}.txt
              exit 1
            fi
          fi
      
      # - name: Setup upterm session
      #   uses: owenthereal/action-upterm@v1
      
      - name: Upload results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: issue_body_${{ inputs.architecture }}_${{ matrix.extensions }}
          path: issue_body_${{ inputs.architecture }}_${{ matrix.extensions }}.txt
