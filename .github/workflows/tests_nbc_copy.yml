name: Verify Nightly Builds (Reusable)
on:
  workflow_call:
    inputs:
      nightly-build:
        required: true
        type: string
      platform: 
        required: false
        type: string
      architecture: 
        required: false
        type: string
      runs-on:
        required: true
        type: string
      extension:
        required: false
        type: string
env:
  GH_TOKEN: ${{ github.token }}
jobs:
  test:
    runs-on: ${{ inputs.runs-on }}
    continue-on-error: true
    steps:
      - name: Set up QEMU
        if: ${{ inputs.architecture == 'linux-aarch64' }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/aarch64
      - name: Checkout the repo with the script
        uses: actions/checkout@v4
      - name: Checkout repo with extensions config file
        uses: actions/checkout@v4
        with:
          repository: duckdb/duckdb
          sparse-checkout: |
            .github/config
          path: ext
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install QEMU dependencies
        if: ${{ inputs.architecture == 'linux-aarch64' }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y libc6-arm64-cross qemu-user-static
      - name: Download artifact 
        uses: actions/download-artifact@v4
        with:
          name: duckdb_cli-${{ inputs.architecture }}
      - name: Download artifact 
        uses: actions/download-artifact@v4
        with:
          name: duckdb_cli-${{ inputs.architecture }}
          path: DNLD  
      - uses: owenthereal/action-upterm@v1

      - name: Set executable permissions to all scripts
        run: chmod +x scripts/*.py
      - name: Test ${{ inputs.nightly-build }} in an aarch64 Docker container
        shell: bash
        if: inputs.architecture == 'linux-aarch64'
        run: |
          unzip duckdb_cli-${{ inputs.architecture }}.zip
          
          matches=$(python scripts/find_extensions.py ext/.github/config/out_of_tree_extensions.cmake | tr -d '[],')

          for ext in $matches; do
            is_installed=$(docker run --rm --platform linux/aarch64 -v $(pwd)/duckdb:/duckdb -e ext=$ext ubuntu:22.04 /bin/bash -c './duckdb -csv -noheader -c "SELECT installed FROM duckdb_extensions() WHERE extension_name=$ext;"')

            if [[ $is_installed == 'false' ]]; then
              result=("INSTALL" "LOAD")
              for res in $result; do
                echo "$res'ing $ext extension..."
                if ! docker run --rm --platform linux/aarch64 -v $(pwd)/duckdb:/duckdb -e ext=$ext -e duckdb=$duckdb ubuntu:22.04 /bin/bash -c '$duckdb -c "$res $ext;"'; then 
                  echo "Failed to $res $ext extension."
                  result="INSTALL"
                  echo "${{ inputs.nightly-build }},${{ inputs.architecture }},${{ inputs.runs-on }},NULL,$ext,$result" >> issue_ext_${{ inputs.architecture }}.txt
                fi
              done
            fi
          done
      - name: Test ${{ inputs.nightly-build }}
        shell: bash
        if: inputs.architecture == 'linux-amd64' || inputs.nightly-build == 'OSX' || inputs.architecture == 'windows-amd64'
        run: |
          unzip duckdb_cli-${{ inputs.architecture }}.zip
          if [[ ${{ inputs.nightly-build }} == Windows ]]; then
            duckdb=./duckdb.exe
          else
            duckdb=./duckdb
          fi

          matches=$(python scripts/find_extensions.py ext/.github/config/out_of_tree_extensions.cmake | tr -d '[],')

          for ext in $matches; do
            is_installed=$($duckdb -csv -noheader -c "SELECT installed FROM duckdb_extensions() WHERE extension_name=$ext;")

            if [[ $is_installed == 'false' ]]; then
              result=(INSTALL LOAD)
              for res in $result; do
                echo "$res'ing $ext extension..."  
                if ! $duckdb -c "$res $ext;"; then
                  echo "Failed to install $ext extension."
                  echo "${{ inputs.nightly-build }},${{ inputs.architecture }},${{ inputs.runs-on }},NULL,$ext,$res" >> issue_ext_${{ inputs.architecture }}.txt
                fi
              done
            fi
          done
      - name: Upload results for extensions
        uses: actions/upload-artifact@v4
        with:
          name: issue_ext_${{ inputs.architecture }}
          path: issue_ext_${{ inputs.architecture }}.txt
          if-no-files-found: ignore