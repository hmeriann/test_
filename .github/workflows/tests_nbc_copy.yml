name: Test Nightly Builds Check (Reusable)
on:
  workflow_call:
    inputs:
      nightly-build:
        required: true
        type: string
      platform: 
        required: false
        type: string
      architecture: 
        required: false
        type: string
      runs-on:
        required: true
        type: string
      extension:
        required: false
        type: string
env:
  GH_TOKEN: ${{ github.token }}
jobs:
  find-extensions:
    runs-on: ubuntu-latest
    outputs:
      extensions: ${{ steps.matches.outputs.extensions }}
    steps:
      - name: Checkout the repo with the script
        uses: actions/checkout@v4
      - name: Checkout repo with extensions config file
        uses: actions/checkout@v4
        with:
          repository: duckdb/duckdb
          sparse-checkout: |
            .github/config
          path: ext
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Find extensions
        shell: bash
        id: matches
        run: |
          chmod +x scripts/find_extensions.py
          matches=$(python scripts/find_extensions.py ext/.github/config/out_of_tree_extensions.cmake | tr -d '[],')
          echo "extensions=$matches" >> $GITHUB_OUTPUT

  test:
    runs-on: ${{ inputs.runs-on }}
    continue-on-error: true
    needs: find-extensions
    steps:
      - name: Set up QEMU
        if: ${{ inputs.architecture == 'linux-aarch64' }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/aarch64
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install qemu dependencies
        if: ${{ inputs.architecture == 'linux-aarch64' }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y libc6-arm64-cross qemu-user-static
      - name: Checkout the repo with the script
        uses: actions/checkout@v4
      - name: Checkout repo with extensions config file
        uses: actions/checkout@v4
        with:
          repository: duckdb/duckdb
          sparse-checkout: |
            .github/config
          path: ext
      - name: Download artifact 
        uses: actions/download-artifact@v4
        with:
          name: duckdb_cli-${{ inputs.architecture }}
      
      # - name: Setup upterm session
      #   uses: owenthereal/action-upterm@v1
      
      - name: Test ${{ inputs.nightly-build }} in an aarch64 Docker container
        shell: bash
        if: inputs.architecture == 'linux-aarch64'
        run: |
          unzip duckdb_cli-${{ inputs.architecture }}.zip
          echo 🍀
          echo ${{ needs.find-extensions.outputs.extensions }}
          matches=${{ needs.find-extensions.outputs.extensions }}

          for ext in $matches; do
            docker run --rm --platform linux/aarch64 -v $(pwd)/duckdb:/duckdb -e ext=$ext ubuntu:22.04 /bin/bash -c './duckdb -line -c "select installed from duckdb_extensions() where extension_name='$ext';"' > sp.csv
            cat sp.csv

            sp=$(tail -n 1 sp.csv | awk '{ print $3 }')
            if [[ $sp == 'false' ]]; then
              echo Installing $ext extension...
              echo $ext
              if ! docker run --rm --platform linux/aarch64 -v $(pwd)/duckdb:/duckdb -e ext=$ext -e duckdb=$duckdb ubuntu:22.04 /bin/bash -c '$duckdb -c "INSTALL $ext;"'; then 
                echo Failed to install $ext extension.
                echo "${{ inputs.nightly-build }},${{ inputs.architecture }},${{ inputs.runs-on }},NULL,$ext,INSTALL" >> issue_ext_${{ inputs.architecture }}.txt
              fi
              echo Loading $ext extension...
              if ! docker run --rm --platform linux/aarch64 -v $(pwd)/duckdb:/duckdb -e ext=$ext -e duckdb=$duckdb ubuntu:22.04 /bin/bash -c '$duckdb -c "LOAD $ext;"'; then
                echo Failed to load $ext extension.
                echo "${{ inputs.nightly-build }},${{ inputs.architecture }},${{ inputs.runs-on }},NULL,$ext,LOAD" >> issue_ext_${{ inputs.architecture }}.txt
              fi
            fi
          done
      # - name: Setup upterm session
      #   if: always()
      #   uses: owenthereal/action-upterm@v1
      - name: Test ${{ inputs.nightly-build }}
        shell: bash
        if: inputs.architecture == 'linux-amd64' || inputs.nightly-build == 'OSX' || inputs.architecture == 'windows-amd64'
        run: |
          unzip duckdb_cli-${{ inputs.architecture }}.zip
          if [[ ${{ inputs.nightly-build }} == Windows ]]; then
            duckdb=./duckdb.exe
          else
            duckdb=./duckdb
          fi
          echo ${{ needs.find-extensions.outputs.extensions }}
          for ext in ${{ needs.find-extensions.outputs.extensions }}; do
            $duckdb -line -c "select installed from duckdb_extensions() where extension_name='$ext';"
            $duckdb -line -c "select installed from duckdb_extensions() where extension_name='$ext';" > sp.csv
            cat sp.csv
            sp=$(tail -n 1 sp.csv | awk '{ print $3 }')
            if [[ $sp == 'false' ]]; then
              echo Installing $ext extension...
              if ! $duckdb -c "INSTALL $ext;"; then
                echo Failed to install $ext extension.
                echo "${{ inputs.nightly-build }},${{ inputs.architecture }},${{ inputs.runs-on }},NULL,$ext,INSTALL" >> issue_ext_${{ inputs.architecture }}.txt
              fi
              echo Loading $ext extension...
              if ! $duckdb -c "LOAD $ext;"; then
                echo Failed to load $ext extension.
                echo "${{ inputs.nightly-build }},${{ inputs.architecture }},${{ inputs.runs-on }},NULL,$ext,INSTALL" >> issue_ext_${{ inputs.architecture }}.txt
              fi
            fi
          done
      
      # - name: Setup upterm session
      #   uses: owenthereal/action-upterm@v1

      - name: Upload results for extensions
        uses: actions/upload-artifact@v4
        with:
          name: issue_ext_${{ inputs.architecture }}
          path: issue_ext_${{ inputs.architecture }}.txt
          if-no-files-found: ignore