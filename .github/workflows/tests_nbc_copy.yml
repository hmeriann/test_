name: Test Nightly Builds Check (Reusable)
on:
  workflow_call:
    inputs:
      nightly-build:
        required: true
        type: string
      platform: 
        required: false
        type: string
      architecture: 
        required: false
        type: string
      runs-on:
        required: true
        type: string
      extension:
        required: false
        type: string
env:
  GH_TOKEN: ${{ github.token }}
jobs:
  get-matrix:
    runs-on: ubuntu-latest
    outputs:
      extensions: ${{ steps.ex.outputs.extensions }}
    steps:
      - name: Checkout the repo with the script
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - uses: actions/checkout@v4
        with:
          repository: duckdb/duckdb
          sparse-checkout: |
            .github/config
          path: ext
      - name: save to GITHUB_OUTPUT
        id: ex
        shell: bash
        run: |
            chmod +x scripts/find_extensions.py
            matches=$(python scripts/find_extensions.py ext/.github/config/out_of_tree_extensions.cmake)
              echo "extensions=$matches" >> $GITHUB_OUTPUT

  test:
    runs-on: ${{ inputs.runs-on }}
    continue-on-error: true
    needs: get-matrix
    # strategy:
    #   matrix:
    #     extensions: ${{ fromJSON(needs.get-matrix.outputs.extensions) }}
    steps:
      - name: Checkout the repo with the script
        uses: actions/checkout@v4
      - name: Checkout repo with extensions config file
        uses: actions/checkout@v4
        with:
          repository: duckdb/duckdb
          sparse-checkout: |
            .github/config
          path: ext
      - name: Set up QEMU
        if: ${{ inputs.architecture == 'linux-aarch64' }}
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/aarch64
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install qemu dependencies
        if: ${{ inputs.architecture == 'linux-aarch64' }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y libc6-arm64-cross qemu-user-static
      - name: Download artifact 
        uses: actions/download-artifact@v4
        with:
          name: duckdb_cli-${{ inputs.architecture }}
      
      # - name: Setup upterm session
      #   uses: owenthereal/action-upterm@v1

      - name: Test ${{ inputs.nightly-build }} in an aarch64 Docker container
        shell: bash
        if: inputs.architecture == 'linux-aarch64'
        run: |
          unzip duckdb_cli-${{ inputs.architecture }}.zip
          if [[ ${{ inputs.nightly-build }} == Windows ]]; then
            duckdb=./duckdb.exe
          else
            duckdb=./duckdb
          fi

          chmod +x scripts/find_extensions.py
          
          # matches=$(python scripts/find_extensions.py ext/.github/config/out_of_tree_extensions.cmake --arch=${{ inputs.architecture }})
          #   echo "extensions=$matches" >> $GITHUB_OUTPUT
          
          matches = ${{ fromJSON(needs.get-matrix.outputs.extensions) }}
          echo $matches
          
          for ext in $matches[@]; do
            docker run --rm --platform linux/aarch64 -v $(pwd)/duckdb:/duckdb -e ext=$ext -e duckdb=$duckdb ubuntu:22.04 /bin/bash -c '$duckdb -line -c "select installed from duckdb_extensions() where extension_name='\''${ext}'\'';"' > sp.csv
            cat sp.csv

            sp=$(tail -n 1 sp.csv | awk '{ print $3 }')
            if [[ $sp == 'false' ]]; then
              echo Installing $ext extension...
              if ! docker run --rm --platform linux/aarch64 -v $(pwd)/duckdb:/duckdb -e ext=$ext -e duckdb=$duckdb ubuntu:22.04 /bin/bash -c'$duckdb -c "INSTALL $ext;"'; then 
                echo Failed to install $ext extension.
                echo "- \`${{ inputs.architecture }}\`: **Failed** to install \`$ext\` extension." >> issue_body_${{ inputs.architecture }}_$ext.txt
                echo "" >> issue_body_${{ inputs.architecture }}_$ext.txt
                exit 1
              fi
              echo Loading $ext extension...
              if ! docker run --rm --platform linux/aarch64 -v $(pwd)/duckdb:/duckdb -e ext=$ext -e duckdb=$duckdb ubuntu:22.04 /bin/bash -c '$duckdb -c "LOAD $ext;"'; then
                echo Failed to load $ext extension.
                echo "- \`${{ inputs.architecture }}\`: **Failed** to load the extension \`$ext\`." >> issue_body_${{ inputs.architecture }}_$ext.txt
                echo "" >> issue_body_${{ inputs.architecture }}_$ext.txt
                exit 1
              fi
            fi
          done
      - name: Setup upterm session
        if: always()
        uses: owenthereal/action-upterm@v1
      - name: Test ${{ inputs.nightly-build }}
        shell: bash
        if: inputs.architecture == 'linux-arm64' || inputs.nightly-build == 'OSX'
        run: |
          unzip duckdb_cli-${{ inputs.architecture }}.zip
          if [[ ${{ inputs.nightly-build }} == Windows ]]; then
            duckdb=./duckdb.exe
          else
            duckdb=./duckdb
          fi
          for ext in $matches[@]; do
            $duckdb -line -c "select installed from duckdb_extensions() where extension_name='$ext';"
            $duckdb -line -c "select installed from duckdb_extensions() where extension_name='$ext';" > sp.csv
            cat sp.csv
            sp=$(tail -n 1 sp.csv | awk '{ print $3 }')
            if [[ $sp == 'false' ]]; then
              echo Installing $ext extension...
              if ! $duckdb -c "INSTALL ${{ inputs.extension }};"; then
                echo Failed to install ${{ inputs.extension }} extension.
                echo "- \`${{ inputs.architecture }}\`: **Failed** to install \`${{ inputs.extension }}\` extension." >> issue_body_${{ inputs.architecture }}_${{ inputs.extension }}.txt
                echo "" >> issue_body_${{ inputs.architecture }}_${{ inputs.extension }}.txt
                exit 1
              fi
              echo Loading ${{ inputs.extension }} extension...
              if ! $duckdb -c "LOAD ${{ inputs.extension }};"; then
                echo Failed to load ${{ inputs.extension }} extension.
                echo "- \`${{ inputs.architecture }}\`: **Failed** to load the extension \`${{ inputs.extension }}\`." >> issue_body_${{ inputs.architecture }}_${{ inputs.extension }}.txt
                echo "" >> issue_body_${{ inputs.architecture }}_${{ inputs.extension }}.txt
                exit 1
              fi
            fi
          done
      
      # - name: Setup upterm session
      #   uses: owenthereal/action-upterm@v1
      
      - name: Upload results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: issue_body_${{ inputs.architecture }}_$ext
          path: issue_body_${{ inputs.architecture }}_$ext.txt

  # prepare-result:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout the repo with the script
  #       uses: actions/checkout@v4
  #     - name: Download test results
  #       uses: actions/download-artifact@v4
  #       with:
  #         pattern: issue_body_${{ inputs.architecture }}*
  #     - name: Prepare a result table
  #       shell: bash
  #       run: |
  #         python -m pip install duckdb
  #         echo "nightly_build,runs_on,version,extension,failed_statement" > result.csv
  #         cat issue_body*/issue_body*.txt >> result.csv
  #         python scripts/prepare_report.py result.csv
  #     - name: Upload result file
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: result_Python
  #         path: res.md