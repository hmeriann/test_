name: Test Sparse-Checkout
on:
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}
  cancel-in-progress: true

jobs:
  define-matrix:
    name: Check if there are recent commits to feature and define matrix
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.branches.outputs.branches }}

    steps:
      - name: checkout DuckDB
        uses: actions/checkout@v4
        with:
          repository: duckdb/duckdb
          fetch-depth: 0
      - name: define matrix
        id: branches
        run: |
          count=$(git log upstream/feature --since="7 days ago" | wc -l)
          if [ $count == 0 ]; then
            echo 'branches=["main"]' >> $GITHUB_OUTPUT
          else
            echo 'branches=["main", "feature"]' >> $GITHUB_OUTPUT
          fi

  configure-mount-and-download-benchmark-data:
    name: Configure mount and download benchmark data
    needs: 
      - define-matrix
      
    runs-on: ubuntu-latest

    steps:
      - name: Install
        shell: bash
        run: sudo apt-get update -y -qq && sudo apt-get install -y -qq g++ ninja-build cmake make python-is-python3 libssl-dev pip gh python3-requests
        
  build-and-setup:
    name: Build DuckDB versions and link the benchmarks
    needs: 
      - define-matrix
      - configure-mount-and-download-benchmark-data
    strategy:
      matrix:
        branch: ${{ fromJSON(needs.define-matrix.outputs.branches) }}
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      GEN: ninja
      BUILD_BENCHMARK: 1
      BUILD_TPCH: 1
      BUILD_TPCDS: 1
      BUILD_JSON: 1
      BUILD_HTTPFS: 1
      BUILD_ICU: 1
      BUILD_JEMALLOC: 1
      CORE_EXTENSIONS: "inet;delta"
      VCPKG_TARGET_TRIPLET: x64-linux
      VCPKG_TOOLCHAIN_PATH: ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
      regression_output: regression_output.txt
    outputs:
      failed_build: ${{ steps.failed-build.outputs.failed_build }}
    steps:
      - name: checkout duckdb-curr
        uses: actions/checkout@v4
        with:
          repository: 'duckdb/duckdb'
          ref: ${{ matrix.branch }}
          fetch-depth: 0
          path: duckdb-curr-${{ matrix.branch }}

      - name: checkout duckdb-old
        uses: actions/checkout@v4
        with:
          repository: 'duckdb/duckdb'
          ref: ${{ matrix.branch }}
          fetch-depth: 0
          path: duckdb-old-${{ matrix.branch }}

      - name: Checkout duckdb-old to week ago version
        shell: bash
        working-directory: duckdb-old-${{ matrix.branch }}
        run: |
          git checkout $( cat ../../duckdb_curr_version_${{ matrix.branch }}.txt )

      - name: Store current git hash of duckdb-curr
        shell: bash
        working-directory: duckdb-curr-${{ matrix.branch }}
        run: |
          # update duckdb_curr_version_${{ matrix.branch }}.txt
          git rev-parse --verify HEAD > ../../duckdb_curr_version_${{ matrix.branch }}.txt

      - name: Setup Ccache
        uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{ github.job }}

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11.1
        with:
          vcpkgGitCommitId: a1a1cbc975abf909a6c8985a6a2b8fe20bbd9bd6

      - name: Configure OpenSSL for Rust
        run: |
          echo "OPENSSL_ROOT_DIR=`pwd`/build/release/vcpkg_installed/x64-linux" >> $GITHUB_ENV
          echo "OPENSSL_DIR=`pwd`/build/release/vcpkg_installed/x64-linux" >> $GITHUB_ENV
          echo "OPENSSL_USE_STATIC_LIBS=true" >> $GITHUB_ENV
      


      - name: Build old and current
        shell: bash
        working-directory: ${{ env.mounted_directory_name }}
        run: |
          cd duckdb-curr-${{ matrix.branch }} && make clean && make
          cd ..
          cd duckdb-old-${{ matrix.branch }} && make clean && make


      - name: fetch test-files for delta
        uses: actions/checkout@v4
        with:
          repository: 'duckdb/duckdb_delta'
          ref: main
          fetch-depth: 1
          sparse-checkout: |
            benchmark/tpcds/sf1/remote/delta/
            .github/regression/tpcds_sf1_local.csv
          path:/duckdb-old-${{ matrix.branch }}/
      

      - name: Set up benchmarks 
        shell: bash
        working-directory: duckdb-old-${{ matrix.branch }}
        run: |
          # we do this so new added benchmarks that break duckdb old
          # do not cause failures.
          rm -rf ../duckdb-curr-${{ matrix.branch }}/benchmark
          mkdir ../duckdb-curr-${{ matrix.branch }}/benchmark
          cp -r benchmark ../duckdb-curr-${{ matrix.branch }}

      - name: Link duckdb-curr/duckdb_benchmark_data to tpch_sf100.duckdb and tpcds_sf100.duckdb
        shell: bash 
        working-directory: duckdb-curr-${{ matrix.branch }}
        run: |
          mkdir duckdb_benchmark_data
          cd duckdb_benchmark_data
          ln -s ${{ github.workspace }}/tpch_sf100.duckdb .
          ln -s ${{ github.workspace }}/tpcds_sf100.duckdb .
    
      - name: Link duckdb-old/duckdb_benchmark_data to tpch_sf100.duckdb and tpcds_sf100.duckdb
        shell: bash 
        working-directory: duckdb-old-${{ matrix.branch }}
        run: |
          mkdir duckdb_benchmark_data
          cd duckdb_benchmark_data
          ln -s ${{ github.workspace }}/tpch_sf100.duckdb .
          ln -s ${{ github.workspace }}/tpcds_sf100.duckdb .
      
      # - name: Generate micro_extended.csv and copy to duckdb-curr-${{ matrix.branch }}
      #   shell: bash
      #   working-directory: duckdb-old-${{ matrix.branch }}
      #   run: |
      #     find benchmark/micro | grep ".*.benchmark" | sort > .github/regression/micro_extended.csv
      #     cp .github/regression/micro_extended.csv ../duckdb-curr-${{ matrix.branch }}/.github/regression/micro_extended.csv

      - id: failed-build
        shell: bash
        if: failure()
        run: |
          echo "failed_build=${{ matrix.branch }}" >> $GITHUB_OUTPUT

  run-regression-tests:
    name: Run Regression Tests
    if: always()
    needs: 
      - define-matrix
      - configure-mount-and-download-benchmark-data
      - build-and-setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJSON(needs.define-matrix.outputs.branches) }}
        test: [ 'tpcds_sf1_local.csv' ]
        exclude: 
          - branch: ${{ needs.build-and-setup.outputs.failed_build }}
    outputs:
      file_name: ${{ steps.create.outputs.file_name }}
        
    steps:
      - name: Create a File Name 
        if: always()
        id: create
        shell: bash
        working-directory: ${{ env.mounted_directory_name }}
        run: |
          echo "file_name=$(echo regression_output_${{ matrix.test }}_${{ matrix.branch }}.txt | sed -e 's/\//_/g' -e 's/\.csv//')" >> $GITHUB_OUTPUT
          
      - name: Run Regression Test
        if: contains(${{ steps.create.outputs.file_name }}, 'regression')
        continue-on-error: true
        shell: bash
        working-directory: ${{ env.mounted_directory_name }}
        run: |
          export disable_timeout=""
          if [[ ${{ matrix.test }} == large/tpcds.csv ]]; then
            disable_timeout="--disable-timeout"
          fi
          python duckdb-curr-${{ matrix.branch }}/scripts/regression_test_runner.py \
            --old=duckdb-old-${{ matrix.branch }}/build/release/benchmark/benchmark_runner \
            --new=duckdb-curr-${{ matrix.branch }}/build/release/benchmark/benchmark_runner \
            --benchmarks=duckdb-curr-${{ matrix.branch }}/.github/regression/${{ matrix.test }} $disable_timeout \
            --verbose > ${{ steps.create.outputs.file_name }}
          
      - name: Upload results
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{ steps.create.outputs.file_name }}
          path: ${{ steps.create.outputs.file_name }}
          if-no-files-found: error
  
  collect-issues:
    name: Collect issues
    needs: 
      
      - define-matrix
      - configure-mount-and-download-benchmark-data
      - build-and-setup
      - run-regression-tests
    if: always()
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.mounted_directory_name }}
    strategy:
      matrix: 
        branch: ${{ fromJSON(needs.define-matrix.outputs.branches) }}
        exclude: 
          - branch: ${{ needs.build-and-setup.outputs.failed_build }}

    steps:
      - name: Collect issues on Benchmarks
        if: contains(github.ref_name, 'main')
        run: |
          # get versions
          ./duckdb-old-${{ matrix.branch }}/build/release/duckdb -c "pragma version" > ${{ matrix.branch }}_old_version.txt
          ./duckdb-curr-${{ matrix.branch }}/build/release/duckdb -c "pragma version" > ${{ matrix.branch }}_curr_version.txt
          printf "\`\`\` \nRegressed Version of Branch: ${{ matrix.branch }} \n$(cat ${{ matrix.branch }}_curr_version.txt)\n\
          OLD VERSION of Branch: ${{ matrix.branch }}\n$(cat ${{ matrix.branch }}_old_version.txt) \n \`\`\` \n" >> issue_body_${{ matrix.branch }}.txt

          # collect issues on benchmarks runs
          for output in regression*.txt; do
            printf "[ ${{ matrix.branch }} ] [ Regression Test $output ]\n" >> issue_body_${{ matrix.branch }}.txt
            printf "Regression Output \n \`\`\` \n $(awk '/REGRESSIONS DETECTED/,/OTHER TIMINGS/' $output) \n \`\`\` \n"  >> issue_body_${{ matrix.branch }}.txt
          done
      
  # file-issue:
  #   name: File Issue
  #   needs: 
      
  #     - define-matrix
  #     - configure-mount-and-download-benchmark-data
  #     - build-and-setup
  #     - run-regression-tests
  #     - collect-issues
  #   if: always()
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       shell: bash
  #       working-directory: ${{ env.mounted_directory_name }}
  #   steps:
  #     - name: File issue on preparation steps
  #       if: |
  #           contains(github.ref_name, 'main') && 
  #           (needs.configure-mount-and-download-benchmark-data.result != 'success' ||
  #           needs.build-and-setup.result != 'success')
  #       run: |
  #         echo -e "Benchmark preparation steps have failed, please check the \
  #           [workflow run](https://github.com/duckdblabs/duckdb-internal/actions/runs/${{ github.run_id }}) for details.\n\n" > report.txt

  #     - name: Create Report
  #       run: |
  #         if grep -q "REGRESSIONS DETECTED" issue_body*.txt; then
  #           echo "Regressions detected, GitHub issue will be filed."
  #           cat issue_body*.txt >> report.txt
  #         fi

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: report
  #         path: report.txt
      # - name: Create Issue
      #   if: success()
      #   run: |
      #     if [ -f report.txt ]; then
      #       # create issue
      #       gh issue create --repo ${{ env.gh_issue_repo }} --title "Weekly Regression Test Failure" --body-file report.txt
      #     fi

  # shutdown:
  #   name: shut down
  #   if: always()
  #   runs-on: ubuntu-latest
  #   needs:
  #     
  #     - file-issue
    # steps:
    #   - name: shutdown
    #     shell: bash
    #     run: sudo shutdown

  upterm:
    runs-on: ubuntu-latest
    needs:
      - define-matrix
      - configure-mount-and-download-benchmark-data
      - build-and-setup
      - run-regression-tests
      - collect-issues
    steps:
    - uses: actions/checkout@v2
    - name: Setup upterm session
      uses: lhotari/action-upterm@v1
      with:
        ## limits ssh access and adds the ssh public key for the user which triggered the workflow
        limit-access-to-actor: true
        ## limits ssh access and adds the ssh public keys of the listed GitHub users
        limit-access-to-users: hmeriann
