name: Test Sparse-Checkout
on:
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}
  cancel-in-progress: true

jobs:
  build-and-setup:
    name: Build DuckDB versions and link the benchmarks
    strategy:
      matrix:
        branch: [ "main" ]
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      GEN: ninja
      BUILD_BENCHMARK: 1
      BUILD_TPCH: 1
      BUILD_TPCDS: 1
      BUILD_JSON: 1
      BUILD_HTTPFS: 1
      BUILD_ICU: 1
      BUILD_JEMALLOC: 1
      CORE_EXTENSIONS: "inet;delta;aws"
      USE_MERGED_VCPKG_MANIFEST: 1
      VCPKG_TARGET_TRIPLET: x64-linux
      VCPKG_TOOLCHAIN_PATH: ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
      regression_output: regression_output.txt
    outputs:
      failed_build: ${{ steps.failed-build.outputs.failed_build }}
    steps:
 
      - name: Install
        shell: bash
        run: |
          sudo apt-get update -y -qq && sudo apt-get install -y -qq g++ ninja-build cmake make python-is-python3 libssl-dev pip gh python3-requests
      
      - name: checkout duckdb-curr
        uses: actions/checkout@v4
        with:
          repository: 'duckdb/duckdb'
          ref: ${{ matrix.branch }}
          fetch-depth: 0
          path: duckdb-curr-${{ matrix.branch }}

      - run: |
          cd duckdb-curr-${{ matrix.branch }}
          sed -i 's/if (\(NOT MINGW AND NOT "${OS_NAME}" STREQUAL "linux"\))/if (DUCKDB_EXTENSION_LOAD_WHITELIST_SET OR (\1))/' .github/config/out_of_tree_extensions.cmake

      - name: Setup Ccache
        uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{ github.job }}

      # - name: Setup Rust
      #   uses: dtolnay/rust-toolchain@stable
      #   with:
      #     targets: wasm32-unknown-emscripten

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable        # Specify the Rust toolchain (stable, nightly, etc.)
          profile: minimal         # Minimal profile for faster builds (optional)
          override: true           # Set this version as default (optional)
    
      # # Run the build
      # - name: Build
      #   run: cargo build --verbose
          
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11.1
        with:
          vcpkgGitCommitId: a1a1cbc975abf909a6c8985a6a2b8fe20bbd9bd6

      - name: Configure OpenSSL for Rust
        run: |
          echo "OPENSSL_ROOT_DIR=`pwd`/build/release/vcpkg_installed/x64-linux" >> $GITHUB_ENV
          echo "OPENSSL_DIR=`pwd`/build/release/vcpkg_installed/x64-linux" >> $GITHUB_ENV
          echo "OPENSSL_USE_STATIC_LIBS=true" >> $GITHUB_ENV

      - name: Build old and current
        shell: bash
        id: build
        working-directory: ${{ github.workspace }}
        continue-on-error: true
        run: |
          cd duckdb-curr-${{ matrix.branch }} && make clean
          make
          # echo "duckdb_extension_load(autocomplete)
          # #duckdb_extension_load(fts)
          # duckdb_extension_load(httpfs)
          # duckdb_extension_load(icu)
          # #duckdb_extension_load(inet)
          # #duckdb_extension_load(sqlsmith)
          # duckdb_extension_load(tpcds)
          # duckdb_extension_load(tpch)
          # duckdb_extension_load(json)
          # #duckdb_extension_load(sqlite_scanner)
          
          # duckdb_extension_load(inet
          #     GIT_URL https://github.com/duckdb/duckdb_inet
          #     GIT_TAG main
          # )
          
          
          # if (DUCKDB_EXTENSION_LOAD_WHITELIST_SET)
          #   duckdb_extension_load(delta
          #     LOAD_TESTS
          #     GIT_URL https://github.com/duckdb/duckdb_delta
          #     GIT_TAG main
          #   )
          # elseif (NOT MINGW AND NOT "${OS_NAME}" STREQUAL "linux")
          #   duckdb_extension_load(delta
          #     LOAD_TESTS
          #     GIT_URL https://github.com/duckdb/duckdb_delta
          #     GIT_TAG main
          #   )
          # endif()" > extension/extension_config_local.cmake
          # make extension_configuration
          # make
      - name: Print Rust logs
        if: failure()
        run: |
          for filename in build/release/rust/src/*/*build-*.log; do 
            echo Printing logs for file $filename
            cat $filename;
            echo Done printing logs for $filename
          done
          
      - name: fetch test-files for delta
        uses: actions/checkout@v4
        with:
          repository: 'duckdb/duckdb_delta'
          ref: main
          fetch-depth: 1
          sparse-checkout: |
            benchmark/tpcds/sf1/remote/delta/
            .github/regression/tpcds_sf1_local.csv
          path: delta_files

      - name: Set up benchmarks 
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          # rm -rf duckdb-curr-${{ matrix.branch }}/benchmark
          # rm -rf duckdb-curr-${{ matrix.branch }}/.github/regression
          cp -rp delta_files/benchmark/* duckdb-curr-${{ matrix.branch }}/benchmark
          cp -rp delta_files/.github/* duckdb-curr-${{ matrix.branch }}/.github
          sed -i 's/\/local\//\/remote\//g' duckdb-curr-${{ matrix.branch }}/.github/regression/tpcds_sf1_local.csv
          sed -i 's/duckdb\///g' duckdb-curr-${{ matrix.branch }}/benchmark/tpcds/sf1/remote/delta/tpcds_sf1.benchmark.in
      - name: Run Regression Test
        continue-on-error: true
        shell: bash
        working-directory: ${{ github.workspace }}/duckdb-curr-${{ matrix.branch }}
        run: |
          python scripts/regression_test_runner.py \
            --old=build/release/benchmark/benchmark_runner \
            --new=build/release/benchmark/benchmark_runner \
            --benchmarks=.github/regression/tpcds_sf1_local.csv 

      - name: Setup upterm session
        uses: lhotari/action-upterm@v1
        with:
          ## limits ssh access and adds the ssh public key for the user which triggered the workflow
          limit-access-to-actor: true
          ## limits ssh access and adds the ssh public keys of the listed GitHub users
          limit-access-to-users: hmeriann
