name: Check Nightly Builds Check (Reusable)
on:
  workflow_call:
    inputs:
      nightly-build:
        required: true
        type: string
    #   platform: 
    #     required: false
    #     type: string
    #   architecture: 
    #     required: true
    #     type: string
      runs-on:
        required: true
        type: string
    outputs:
      is_failure: 
        description: "Stores nightly-build's conclusion."
        value: ${{ jobs.check-build.outputs.is_failure }}
      has_artifact: 
        description: "If there is an expected artifact, stores 'true'."
        value: ${{ jobs.check-build.outputs.has_artifact }}
        
env:
  GH_TOKEN: ${{ github.token }}
jobs:
  check-build:
    runs-on: ${{ inputs.runs-on }}
    outputs:
      is_failure: ${{ steps.check-build.outputs.is_failure }}
      has_artifact: ${{ steps.check-build.outputs.has_artifact }}
    steps:
      - name: Check ${{ inputs.nightly-build }}
        id: check-build
        shell: bash
        run: |
          gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json conclusion
          conclusion=$(gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json conclusion) 
          if echo $conclusion | grep -q 'failure'; then
            gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json url > url.csv
            url=$(tail -n 1 url.csv | awk -F "[:}]" '{ print $3 }')
            echo "is_failure=failure" >> $GITHUB_OUTPUT
            
            echo Checking consecutive failures...
            gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --json conclusion,url,name,startedAt > ${{ inputs.nightly-build }}.json
            curl -L https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-linux-amd64.zip -o duckdb_cli.zip
            unzip duckdb_cli.zip
            duckdb=./duckdb
            
            echo Counting consecutive failures...
            ($duckdb -csv -c "
              WITH runs AS (
                SELECT * FROM read_json('${{ inputs.nightly-build }}.json')
              )
              SELECT
                conclusion,
                count(*) AS count
              FROM (
                  SELECT
                    conclusion,
                    (row_number() OVER (ORDER BY startedAt) - row_number() OVER (PARTITION BY conclusion ORDER BY startedAt)) AS freq
                  FROM runs
              )  
              WHERE conclusion='failure' GROUP BY freq, conclusion ORDER BY count DESC LIMIT 1;"
            ) > result.csv
            
            failures=$(tail -n +2 result.csv | awk -F ","  '{ print $2 }')
            # if there are more than 4 consecutive failures, file a report
            if [[ $failures -ge 4 ]]; then
              ./duckdb -c "
                COPY (
                  SELECT '|' || conclusion || '|' || startedAt || '|' || url || ')|' AS markdown_line
                  FROM read_json('${{ inputs.nightly-build }}.json') 
                    WHERE conclusion='failure'
                )  
                TO 'failures_.md' (HEADER 0, QUOTE '');"
              {
                echo
                echo "### ${{ inputs.nightly-build }}:"
                echo "At least one job has failed in the **${{ inputs.nightly-build }}** nightly-build consecutively $failures times: [ Run Link ](https:$url) "
                echo "#### Failure Details"
                echo
                echo "| Conclusion | Started At | Run URL |"
                echo "|------------|------------|---------|"
                cat failures_.md 
              } >> issue_body_${{ inputs.architecture }}.txt
              echo "is_failure=failure" >> $GITHUB_OUTPUT
            fi
            rm $duckdb
          fi

          echo Installing latest Duckdb...
          python3 -m pip install duckdb --pre --upgrade

          echo Verifying version...
          full_sha=$(gh run view $run_id --repo duckdb/duckdb --json headSha -q .headSha)
          python3 scripts/scripts/verify_version.py $full_sha --workflow ${{ inputs.nightly-build }} --architecture TEST
      # - name: Setup upterm session
      #   uses: owenthereal/action-upterm@v1
      - name: Upload issue
        if: ${{ steps.check-build.outputs.is_failure }} == failure
        uses: actions/upload-artifact@v4
        with:
          name: issue_body_TEST
          path: issue_body_TEST.txt

    #   - name: Upload build
    #     if: ${{ steps.check-build.outputs.has_artifact }} == true
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: duckdb_cli-${{ inputs.architecture }}
    #       path: duckdb_cli-${{ inputs.architecture }}.zip
