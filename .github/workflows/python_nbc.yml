name: Check Nightly Builds Check (Reusable)
on:
  workflow_call:
    inputs:
      nightly-build:
        required: true
        type: string
      runs-on:
        required: true
        type: string
    outputs:
      is_failure: 
        description: "Stores nightly-build's conclusion."
        value: ${{ jobs.check-build.outputs.is_failure }}
      has_artifact: 
        description: "If there is an expected artifact, stores 'true'."
        value: ${{ jobs.check-build.outputs.has_artifact }}
        
env:
  GH_TOKEN: ${{ github.token }}
jobs:
  check-build:
    runs-on: ${{ matrix.runs-on }}
    outputs:
      is_failure: ${{ steps.check-build.outputs.is_failure }}
      has_artifact: ${{ steps.check-build.outputs.has_artifact }}
    strategy:
      matrix:
        runs-on: [ ubuntu-latest, macos-latest, windows-2019 ]
    steps:
      - name: Checkout the repo with the script
        uses: actions/checkout@v4
        
      - name: Check ${{ inputs.nightly-build }}
        id: check-build
        shell: bash
        run: |
          gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json conclusion
          conclusion=$(gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json conclusion) 
          if echo $conclusion | grep -q 'failure'; then
            gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json url > url.csv
            url=$(tail -n 1 url.csv | awk -F "[:}]" '{ print $3 }')
            echo "is_failure=failure" >> $GITHUB_OUTPUT
            
            echo Checking consecutive failures...
            gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --json conclusion,url,name,startedAt > ${{ inputs.nightly-build }}.json
            if [[ ${{ matrix.runs-on }} == windows-2019 ]]; then
              curl -L https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-windows-amd64.zip -o duckdb_cli.zip
              unzip duckdb_cli.zip
              duckdb=./duckdb.exe
            else
              if [[ ${{ matrix.runs-on }} == macos-latest ]]; then
                curl -L https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-osx-universal.zip -o duckdb_cli.zip
              elif [[ ${{ matrix.runs-on }} == ubuntu-latest ]]; then
                curl -L https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-linux-amd64.zip -o duckdb_cli.zip
              fi
              unzip duckdb_cli.zip
              duckdb=./duckdb
            fi
            
            echo Counting consecutive failures...
            ($duckdb -csv -c "
              WITH runs AS (
                SELECT * FROM read_json('${{ inputs.nightly-build }}.json')
              )
              SELECT
                conclusion,
                count(*) AS count
              FROM (
                  SELECT
                    conclusion,
                    (row_number() OVER (ORDER BY startedAt) - row_number() OVER (PARTITION BY conclusion ORDER BY startedAt)) AS freq
                  FROM runs
              )  
              WHERE conclusion='failure' GROUP BY freq, conclusion ORDER BY count DESC LIMIT 1;"
            ) > result.csv
            
            failures=$(tail -n +2 result.csv | awk -F ","  '{ print $2 }')
            echo Found $failures consecutive failures
            
            # if there are more than 4 consecutive failures, file a report
            if [[ $failures -ge 4 ]]; then
              
              echo Starting to log an issue...
              ./duckdb -c "
                COPY (
                  SELECT '|' || conclusion || '|' || startedAt || '|' || url || ')|' AS markdown_line
                  FROM read_json('${{ inputs.nightly-build }}.json') 
                    WHERE conclusion='failure' LIMIT $failures
                )  
                TO 'failures_.md' (HEADER 0, QUOTE '');"
              {
                echo
                echo "### ${{ inputs.nightly-build }}:"
                echo "At least one job has failed in the **${{ inputs.nightly-build }}** nightly-build consecutively $failures times: [ Run Link ](https:$url) "
                echo "#### Failure Details"
                echo
                echo "| Conclusion | Started At | Run URL |"
                echo "|------------|------------|---------|"
                cat failures_.md 
              } >> issue_body_Python_failures_${{ matrix.runs-on }}.txt
              echo "is_failure=failure" >> $GITHUB_OUTPUT
            fi
            rm $duckdb
          fi
          
          if [[ ${{ inputs.nightly-build }} == Python ]]; then
            echo Installing latest Duckdb...
            python3 -m pip install duckdb --pre --upgrade
            gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json databaseId > run_id.csv
            run_id=$(tail -n 1 run_id.csv | awk -F "[:}]" '{ print $2 }' | tr -d ' "')
            
            echo Verifying version...
            full_sha=$(gh run view $run_id --repo duckdb/duckdb --json headSha -q .headSha)
            python3 scripts/verify_version.py $full_sha --workflow ${{ inputs.nightly-build }} --architecture Python_extensions
            
            echo Trying to INSTALL and LOAD extensions...
            python3 scripts/test_install_load_extensions.py
          fi
    #   - name: Setup upterm session
    #     uses: owenthereal/action-upterm@v1
      - name: Upload issue
        if: ${{ steps.check-build.outputs.is_failure }} == failure
        uses: actions/upload-artifact@v4
        with:
          name: issue_body_Python_extensions_${{ matrix.runs-on }}
          path: issue_body_*.txt

    #   - name: Upload build
    #     if: ${{ steps.check-build.outputs.has_artifact }} == true
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: duckdb_cli-${{ inputs.architecture }}
    #       path: duckdb_cli-${{ inputs.architecture }}.zip
