name: Simple WR
on:
  workflow_dispatch:

jobs:
  define-matrix:
    name: Check if feature branch exists and define matrix
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.branches.outputs.branches }}

    steps:
      - id: branches
        run: | 
          echo 'branches=[ "main", "feature" ]' >> "$GITHUB_OUTPUT"

  configure:
    name: Configure mount and download benchmark data
    needs: 
      - define-matrix
    runs-on: ubuntu-latest

    steps:
      - run: exit 0
      
  build:
    name: Build DuckDB versions and link the benchmarks
    needs: 
      - define-matrix
      - configure
    strategy:
      matrix:
        branch: ${{ fromJSON(needs.define-matrix.outputs.branches) }}
    runs-on: ubuntu-latest
    outputs:
      build_one: ${{ steps.success.outputs.build_one }}
      build_two: ${{ steps.success.outputs.build_two }}

    steps:
      - name: Build old and current
        shell: bash
        id: build
        run: |
          echo "${{ matrix.branch }}" üê£
          # if [ ${{ matrix.branch }} == 'feature' ]; then
          #   exit 1
          # fi
      
      - id: success
        shell: bash
        if: ${{ steps.build.outcome == 'success' }}
        run: |
          if [[ "${{ matrix.branch }}" = "main" ]]; then
            echo "build_one=${{ matrix.branch }}" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.branch }}" = "feature" ]]; then
            echo "build_two=${{ matrix.branch }}" >> $GITHUB_OUTPUT
          fi
          
  branch-matrix:
    name: Create a new matrix with built branch names
    if: always()
    needs: 
      - define-matrix
      - configure
      - build
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.builds.outups.build }}
    steps:
      - id: builds
        run: |
          echo "ONE: ${{ needs.build.outputs.build_one }} "
          echo "TWO: ${{ needs.build.outputs.build_two }}"
          
          if "${{ needs.build.outputs.build_one == 'main' }}" && "${{ needs.build.outputs.build_two == 'feature' }}"; then
            echo 'build=[ "${{ needs.build.outputs.build_one }}", "${{ needs.build.outputs.build_two }}" ]' >> "$GITHUB_OUTPUT"
          elif "${{ needs.build.outputs.build_one == 'main' }}" && "${{ needs.build.outputs.build_two != 'feature' }}"; then
            echo 'build=[ "${{ needs.build.outputs.build_one }}" ]' >> "$GITHUB_OUTPUT"
          elif "${{ needs.build.outputs.build_one != 'main' }}" && "${{ needs.build.outputs.build_two == 'feature' }}"; then
            echo 'build=[ "${{ needs.build.outputs.build_two }}" ]' >> "$GITHUB_OUTPUT"
          else
            exit 1
          fi

  debug:
    name: Debug
    if: always()
    needs: 
      - define-matrix
      - configure
      - build
      - branch-matrix
    runs-on: ubuntu-latest
    steps:
      - run: echo "${{ needs.branch-matrix.outputs.build }}"
        
  run-tests:
    name: Run Regression Tests
    if: always()
    needs: 
      - define-matrix
      - configure
      - build
      - branch-matrix
      - debug
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJSON(needs.branch-matrix.outputs.build) }}
        test: [ 'one', 'two', 'three', 'four' ]
        
    steps:
          
      - name: Run Regression Test
        continue-on-error: true
        shell: bash
        run: |
          echo ${{ matrix.branch }} ‚è©Ô∏è ${{ matrix.text }} ‚èπÔ∏è
          
  collect-issues:
    name: Collect failures
    needs: 
      - define-matrix
      - configure
      - build
      - branch-matrix
      - run-tests
    if: always()
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      matrix: 
        branch: ${{ fromJSON(needs.branch-matrix.outputs.build) }}

    steps:
      - name: Collect issues on Benchmarks
        if: contains(github.ref_name, 'main')
        run: |
          # collect issues on benchmarks runs
          echo "${{ matrix.branch }}"
      
  # file-issue:
  #   name: File Issue
  #   needs: 
  #     - define-matrix
  #     - configure
  #     - build
  #     - run-tests
  #     - collect-issues
  #   if: always()
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - name: File issue on preparation steps
  #       if: |
  #           contains(github.ref_name, 'main') && 
  #           (needs.configure.result != 'success' || 
  #           needs.build.result != 'success')
  #       run: |
  #         echo "Failed to run Weekly Regression Benchmarks"

      - name: Send issue to gh
        run: |
          echo "REGRESSIONS DETECTED"
