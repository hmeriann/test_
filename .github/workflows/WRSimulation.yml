name: Weekly Regression
on:
  workflow_dispatch:

jobs:
  define-matrix:
    name: Check if feature branch exists and define matrix
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.branches.outputs.branches }}

    steps:
      - id: branches
        run: | 
            echo feature_branch_exists='true' >> $GITHUB_OUTPUT
            echo feature_branch_exists='false' >> $GITHUB_OUTPUT
            
  configure:
    name: Configure mount and download benchmark data
    needs: 
      - define-matrix
    runs-on: ubuntu-latest

    steps:
      - run: exit 0
      
  build:
    name: Build DuckDB versions and link the benchmarks
    needs: 
      - define-matrix
      - configure
    strategy:
      matrix:
        branch: ${{ fromJSON(needs.define-matrix.outputs.branches) }}
    runs-on: ubunru-latest
    
    steps:
      - name: Build old and current
        shell: bash
        run: |
          echo ${{ matrix.branch }} üê£
          if [ mathix.branch == 'feature' ]; then
            exit 1
          fi
          
  run-tests:
    name: Run Regression Tests
    if: always()
    needs: 
      - define-matrix
      - configure
      - build
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJSON(needs.define-matrix.outputs.branches) }}
        test: ['one', 'two', 'three', 'four']
        
    steps:
          
      - name: Run Regression Test
        continue-on-error: true
        shell: bash
        run: |
          echo ${{ matrix.branch }} ‚è©Ô∏è ${{ matrix.text }} ‚èπÔ∏è
          
  collect-issues:
    name: Collect failures
    needs: 
      - define-matrix
      - configure
      - build
      - run-tests
    if: always()
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      matrix: 
        branch: ${{ fromJSON(needs.define-matrix.outputs.branches) }}

    steps:
      - name: Collect issues on Benchmarks
        if: contains(github.ref_name, 'main')
        run: |
          # collect issues on benchmarks runs
          echo "touch ~/previous_failed_${{ matrix.branch }}.txt"
      
  file-issue:
    name: File Issue
    needs: 
      - define-matrix
      - configure
      - build
      - run-tests
      - collect-issues
    if: always()
    runs-on: self-hosted
    defaults:
      run:
        shell: bash
    steps:
      - name: File issue on preparation steps
        if: |
            contains(github.ref_name, 'main') && 
            (needs.configure.result != 'success' || 
            needs.build.result != 'success')
        run: |
          echo "Failed to run Weekly Regression Benchmarks"

      - name: Send issue to gh
        run: |
          echo "REGRESSIONS DETECTED"
