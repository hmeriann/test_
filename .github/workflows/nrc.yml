name: Check Nightly Builds Check (Reusable)
on:
  workflow_call:
    inputs:
      nightly-build:
        required: true
        type: string
      platform:
        required: true
        type: string
      version: 
        required: false
        type: string
      # container:
      #   required: false
      #   type: string
      runs-on:
        required: true
        type: string
    outputs:
      is_failure: 
        description: "Stores nightly-build's conclusion."
        value: ${{ jobs.check-build.outputs.is_failure }}
        
env:
  GH_TOKEN: ${{ github.token }}
jobs:
  check-build:
    runs-on: ${{ inputs.runs-on }}
    # container: ${{ inputs.container }}
    outputs:
      is_failure: ${{ steps.check-build.outputs.is_failure }}
    steps:
      - name: Check ${{ inputs.nightly-build }}
        id: check-build
        shell: bash
        run: |
          gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json conclusion
          conclusion=$(gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json conclusion) 
          if echo $conclusion | grep -q 'failure'; then
            gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json url > url.csv
            url=$(tail -n 1 url.csv | awk -F "[:}]" '{ print $3 }')
            printf "The nightly-build \`${{ inputs.nightly-build }}\` had failed: https:$url.\n " > issue_body_${{ inputs.platform }}_${{ inputs.version }}.txt
            echo "is_failure=failure" >> $GITHUB_OUTPUT
            
            echo check consecutive failures
            gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --json conclusion,url,name > ${{ inputs.nightly-build }}.json
            if ${{ inputs.platform }} == Windows; then
              curl -L https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-windows-amd64.zip -o duckdb_cli.zip
              tar -xf duckdb_cli.zip
              duckdb=./duckdb.exe
            else
              if ${{ inputs.platform }} == OSX; then
                curl -L https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-osx-universal.zip -o duckdb_cli.zip
              else
                curl -L https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-linux-amd64.zip -o duckdb_cli.zip
              fi
              unzip duckdb_cli.zip
              duckdb=./duckdb
            fi
            
            # count consecutive failures and write to the result.csv
            ($duckdb -csv -c "
                WITH runs AS (
                  SELECT * FROM read_json('${{ inputs.nightly-build }}.json')
                  LIMIT 8
                )
                SELECT
                  conclusion,
                  count(*) AS count
                FROM (
                    SELECT
                      conclusion,
                      (row_number() OVER (ORDER BY startedAt) - row_number() OVER (PARTITION BY conclusion ORDER BY startedAt)) AS freq
                    FROM runs
                )  
                WHERE conclusion='failure' GROUP BY freq, conclusion ORDER BY count DESC LIMIT 1;"
              ) > result.csv
            
            echo get the number of failures
            failures=$(tail -n +2 result.csv | awk -F ","  '{ print $2 }')
            # if there are more than 4 consecutive failures, file a report
            if [[ $failures -ge 4 ]]; then
              echo "${{ inputs.nightly-build }} nightly-build had consecutively failed $failures times so far.\n" >> issue_body_${{ inputs.platform }}_${{ inputs.version }}.txt
              ./duckdb -c "COPY (
                  SELECT conclusion, startedAt, url
                  FROM read_json('input_${{ matrix.nightly_build }}.json') 
                    WHERE conclusion='failure'
                  )  
                  TO 'failures_${{ inputs.platform }}.txt' (DELIMITER '|', HEADER 1);"
              echo $(cat failures_${{ inputs.platform }}.txt) >> issue_body_${{ inputs.platform }}_${{ inputs.version }}.txt
            fi
            # exit 1
          fi

      - name: Setup upterm session
        uses: owenthereal/action-upterm@v1
      
      - name: Upload results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: issue_body_${{ inputs.platform }}_${{ inputs.version }}
          path: issue_body_${{ inputs.platform }}_${{ inputs.version }}.txt
