name: Check Nightly Builds Check (Reusable)
on:
  workflow_call:
    inputs:
      nightly-build:
        required: true
        type: string
      version: 
        required: false
        type: string
      runs-on:
        required: true
        type: string
    outputs:
      is_failure: 
        description: "Stores nightly-build's conclusion."
        value: ${{ jobs.check-build.outputs.is_failure }}
        
env:
  GH_TOKEN: ${{ github.token }}
jobs:
  check-build:
    runs-on: ${{ inputs.runs-on }}
    # container: ${{ inputs.container }}
    outputs:
      is_failure: ${{ steps.check-build.outputs.is_failure }}
    steps:
      - name: Check ${{ inputs.nightly-build }}
        id: check-build
        shell: bash
        run: |
          gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json conclusion
          conclusion=$(gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json conclusion) 
          if echo $conclusion | grep -q 'failure'; then
            gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json url > url.csv
            url=$(tail -n 1 url.csv | awk -F "[:}]" '{ print $3 }')
            echo "is_failure=failure" >> $GITHUB_OUTPUT
            
            echo check consecutive failures
            gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --json conclusion,url,name,startedAt > ${{ inputs.nightly-build }}.json
            if [[ ${{ inputs.nightly-build }} == Windows ]]; then
              curl -L https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-windows-amd64.zip -o duckdb_cli.zip
              echo duckdb_cli-windows-amd64.zip
            elif [[ ${{ inputs.nightly-build }} == OSX ]]; then
              curl -L https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-osx-universal.zip -o duckdb_cli.zip
              echo duckdb_cli-osx-universal.zip
            elif [[ ${{ inputs.nightly-build }} == LinuxRelease ]]; then
              curl -L https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-linux-amd64.zip -o duckdb_cli.zip
              echo duckdb_cli-linux-amd64.zip
            fi
            unzip duckdb_cli.zip
            duckdb=./duckdb
            
            echo count consecutive failures and write to the result.csv
            ($duckdb -csv -c "
                WITH runs AS (
                  SELECT * FROM read_json('${{ inputs.nightly-build }}.json')
                )
                SELECT
                  conclusion,
                  count(*) AS count
                FROM (
                    SELECT
                      conclusion,
                      (row_number() OVER (ORDER BY startedAt) - row_number() OVER (PARTITION BY conclusion ORDER BY startedAt)) AS freq
                    FROM runs
                )  
                WHERE conclusion='failure' GROUP BY freq, conclusion ORDER BY count DESC LIMIT 1;"
              ) > result.csv
            
            echo Counting number of failures...
            failures=$(tail -n +2 result.csv | awk -F ","  '{ print $2 }')
            # if there are more than 4 consecutive failures, file a report
            if [[ $failures -ge 4 ]]; then
              ./duckdb -c "
                COPY (
                  SELECT '|' || conclusion || '|' || startedAt || '|' || url || ')|' AS markdown_line
                  FROM read_json('${{ inputs.nightly-build }}.json') 
                    WHERE conclusion='failure'
                )  
                TO 'failures_.md' (HEADER 0, QUOTE '');"
              {
                echo
                echo "- The nightly-build **${{ inputs.nightly-build }}** has consecutively failed 9 times: [ Run Link ](https:$url) "
                echo
                echo "#### Failure Details"
                echo
                echo "| Conclusion | Started At | Run URL |"
                echo "|------------|------------|---------|"
                cat failures_.md 
              } >> issue_body__${{ inputs.version }}.txt
            fi

            echo Downloading duckdb-binaries-${{ inputs.version }} artifact...
            gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json databaseId > run_id.csv
            run_id=$(tail -n 1 run_id.csv | awk -F "[:}]" '{ print $2 }' | tr -d ' "')
            if gh run download $run_id --repo duckdb/duckdb -n duckdb-binaries-${{ inputs.version }}; then
              echo Artifact duckdb-binaries-${{ inputs.version }} is successfuly downloded.
              unzip duckdb-binaries-${{ inputs.version }}/*
              echo Verifying version...
              ./duckdb --version > pragma_version.csv
              short_sha=$(tail -n 2 pragma_version.csv | awk '{ print $2 }')
              full_sha=$(gh run view $run_id --repo duckdb/duckdb --json headSha -q .headSha)
              if [[ $full_sha != $short_sha* ]]; then
                printf "The version of \`${{ inputs.nightly-build }}\` build (\`$short_sha\`) is not the same as the version triggered the build (\`$full_sha\`).\n " > issue_body_${{ inputs.version }}.txt
                exit 1
              fi
            else  
              echo FAILED downloading the artifact duckdb-binaries-${{ inputs.version }}
            fi
            exit 1
          fi
      
      - name: Upload issue
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: issue_body_${{ inputs.version }}
          path: issue_body_${{ inputs.version }}.txt

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          path: duckdb-binaries-${{ inputs.version }}
