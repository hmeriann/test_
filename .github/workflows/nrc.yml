name: Nightly Builds Check
on:
  workflow_call:
    inputs:
      nightly-build:
        required: true
        type: string
      platform:
        required: true
        type: string
      version: 
        required: false
        type: string
      runs-on:
        required: true
        type: string
env:
  GH_TOKEN: ${{ github.token }}
jobs:
  check:
    runs-on: ${{ inputs.runs-on }}
    continue-on-error: true
    steps:
      - name: Check ${{ inputs.nightly-build }}
        run: |
          gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json conclusion
          conclusion=$(gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json conclusion) 
          if echo $conclusion | grep -q 'failure'; then
            gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json url > url.csv
            url=$(tail -n 1 url.csv | awk -F "[:}]" '{ print $3 }')
            printf "\`\`\`\nThe nightly-build ${{ inputs.nightly-build }} had failed.\n Please see the run https:$url.\n\`\`\`" > issue_body.txt
          else
            gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json databaseId > run_id.csv
            run_id=$(tail -n 1 run_id.csv | awk -F "[:}]" '{ print $2 }' | tr -d ' "')
            gh run download $run_id --repo duckdb/duckdb
            unzip duckdb-binaries-${{ inputs.platform }}/duckdb_cli-${{ inputs.version }}.zip || { echo "Unzip failed"; exit 1; }
            echo verify versions
            ./duckdb --version > pragma_version.csv
            short_sha=$(tail -n 2 pragma_version.csv | awk '{ print $2 }')
            full_sha=$(gh run view $run_id --repo duckdb/duckdb --json headSha -q .headSha)
            if [[ $full_sha != $short_sha* ]]; then
              printf "\`\`\`\nThe version of Linux build ($p_version) is not the same as the version triggered the build ($sha).\n\`\`\`" > issue_body.txt
            else
              ./duckdb -line -c "select installed from duckdb_extensions() where extension_name='spatial';"
              ./duckdb -line -c "select installed from duckdb_extensions() where extension_name='spatial';" > sp.csv
              sp=$(tail -n 1 sp.csv | awk '{ print $3 }')
              if [[ $sp == 'false' ]]; then
                echo try to INSTALL extension
                ./duckdb -c "INSTALL spatial;"
                ./duckdb -line -c "select installed from duckdb_extensions() where extension_name='spatial';"
                ./duckdb -line -c "select installed from duckdb_extensions() where extension_name='spatial';" > sp.csv
                sp=$(tail -n 1 sp.csv | awk '{ print $3 }')
                if [[ $sp != 'true' ]]; then
                  echo "Failed to INSTALL an extension." >> issue_body.txt
                fi
                echo try to load extension
                if ./duckdb -c "LOAD spatial;" ; then
                  echo "Failed to LOAD an extension." >> issue_body.txt
                fi
                echo install unexpected
                if ! ./duckdb -c "INSTALL unexpected;"; then
                  echo "INSTALLation of unexpected extension didn't return 1." >> issue_body.txt
                fi
              fi
            fi
          fi
      - name: Upload results
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: issues_linux.txt
          path: issue_body.txt
          if-no-files-found: error 
      - name: Upload results
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: issues_${{ inputs.platform }}.txt
          path: issue_body.txt
          if-no-files-found: error 
