name: Test exclude strategy for matrix
on:
  workflow_dispatch:
env:
  gh_issue_repo: hmeriann/test_
jobs:
  define-matrix:
    name: Check if feature branch exists and define matrix
    runs-on: ubuntu-latest
    outputs:
      feature_branch_exists: ${{ steps.check_feature_branch_exists.outputs.feature_branch_exists }}
      days_since_last_commit: ${{ steps.check_last_commit_date.outputs.days_since_last_commit }}
      branches: ${{ steps.branches.outputs.branches }}

    steps:
      - name: define matrix
        id: branches
        run: |
          echo 'branches=["main", "feature"]' >> $GITHUB_OUTPUT
          
  build:
    name: Build
    needs: 
      - define-matrix
    strategy:
      matrix:
        branch: ${{ fromJSON(needs.define-matrix.outputs.branches) }}
      fail-fast: false
    runs-on: ubuntu-latest
    outputs:
      failed_build: ${{ steps.success.outputs.failed_build }}
    steps:
      - run: |
          if [[ "${{ matrix.branch }}" = "main" ]]; then
            exit 1
          fi
      - id: success
        shell: bash
        if: ${{ job.status != 'success' }}
        run: |
          echo failed_build=${{ matrix.branch }} >> $GITHUB_OUTPUT
          
  run-tests:
    name: Run Tests
    if: always()
    needs: 
      - define-matrix
      - build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJSON(needs.define-matrix.outputs.branches) }}
        test: ['large/tpch.csv', 'tpcds.csv']
        exclude: 
          - branch: ${{ fromJSON(needs.build.outputs.failed_build) }}
    outputs:
      file_name: ${{ steps.create.outputs.file_name }}
        
    steps:
      - name: Create a File Name 
        if: always()
        id: create
        shell: bash
        run: |
          echo "file_name=$(echo regression_output_${{ matrix.test }}_${{ matrix.branch }}.txt | sed -e 's/\//_/g' -e 's/\.csv//')" >> $GITHUB_OUTPUT
          
      - name: Run Regression Test
        if: contains(${{ steps.create.outputs.file_name }}, 'regression')
        continue-on-error: true
        shell: bash
        run: |
          python duckdb-curr-${{ matrix.branch }}/scripts/regression_test_runner.py \
            --old=duckdb-old-${{ matrix.branch }}/build/release/benchmark/benchmark_runner \
            --new=duckdb-curr-${{ matrix.branch }}/build/release/benchmark/benchmark_runner \
            --benchmarks=duckdb-curr-${{ matrix.branch }}/.github/regression/${{ matrix.test }} \
            --verbose > ${{ steps.create.outputs.file_name }}
          
      - name: Upload results
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{ steps.create.outputs.file_name }}
          path: ${{ env.mounted_directory_name }}/${{ steps.create.outputs.file_name }}
          if-no-files-found: error
  
  collect-issues:
    name: Collect issues
    needs: 
      - define-matrix
      - build
      # - update-branches-matrix
      - run-tests
    if: always() && needs.update-branches-matrix.result == 'success'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      matrix: 
        branch: ${{ fromJSON(needs.define-matrix.outputs.branches) }}
        exclude: 
          - branch: ${{ fromJSON(needs.build.outputs.failed_build) }}
    steps:
      - name: Collect issues on Benchmarks
        # if: contains(github.ref_name, 'main')
        run: |
          # get versions
          ./duckdb-old-${{ matrix.branch }}/build/release/duckdb -c "pragma version" > ${{ matrix.branch }}_old_version.txt
          ./duckdb-curr-${{ matrix.branch }}/build/release/duckdb -c "pragma version" > ${{ matrix.branch }}_curr_version.txt
          printf "\`\`\` \nRegressed Version of Branch: ${{ matrix.branch }} \n$(cat ${{ matrix.branch }}_curr_version.txt)\n\
          OLD VERSION of Branch: ${{ matrix.branch }}\n$(cat ${{ matrix.branch }}_old_version.txt) \n \`\`\` \n" >> issue_body_${{ matrix.branch }}.txt

          # collect issues on benchmarks runs
          for output in regression*.txt; do
            printf "[ ${{ matrix.branch }} ] [ Regression Test $output ]\n" >> issue_body_${{ matrix.branch }}.txt
            printf "Regression Output \n \`\`\` \n $(awk '/REGRESSIONS DETECTED/,/OTHER TIMINGS/' $output) \n \`\`\` \n"  >> issue_body_${{ matrix.branch }}.txt
          done
          # notify next run that it should not update duckdb-old-${{ matrix.branch }}
          touch ~/previous_failed_${{ matrix.branch }}.txt
        
      - name: Remove previous_failed if no issues.
        run: |
          if [ -f ! issue_body_${{ matrix.branch }}.txt ]; then
            echo "No regressions detected"
            rm -f ~/previous_failed_${{ matrix.branch }}.txt
          fi
      
  file-issue:
    name: File Issue
    needs: 
      - define-matrix
      - build
      - run-tests
      - collect-issues
    if: always()
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: File issue on preparation steps
        # this condition won't let the tests run if one of the builds fails 
        if: needs.configure-mount-and-download-benchmark-data.result != 'success' || needs.build-duckdb-versions-and-setup-benchmarks.result != 'success'
        run: |
          gh issue create --repo ${{ env.gh_issue_repo }} \
            --title "Failed to run Weekly Regression Benchmarks" \
            --body "Benchmark preparation steps have failed, please check the \
            [workflow run](https://github.com/duckdblabs/duckdb-internal/actions/runs/${{ github.run_id }}) for details."

      - name: Send issue to gh
        run: |
          if grep -q "REGRESSIONS DETECTED" issue_body*.txt; then
            echo "Regressions detected, GitHub issue will be filed."
            cat issue_body*.txt >> report.txt
            # create issue
            gh issue create --repo ${{ env.gh_issue_repo }} --title "Weekly Regression Test Failure" --body-file report.txt
          fi
