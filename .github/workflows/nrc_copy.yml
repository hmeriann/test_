name: Check Nightly Build Status (Aarch64)
on:
  workflow_call:
    inputs:
      nightly-build:
        required: true
        type: string
      platform: 
        required: false
        type: string
      architecture: 
        required: true
        type: string
      runs-on:
        required: true
        type: string
    outputs:
      is_failure: 
        description: "If nightly-build's conclusion is 'failure', stores 'true'."
        value: ${{ jobs.check-build.outputs.is_failure }}
      run_url:
        description: "Stores run URL."
        value: ${{ jobs.check-build.outputs.run_url }}
      has_artifact: 
        description: "If there is an expected artifact, stores 'true'."
        value: ${{ jobs.check-build.outputs.has_artifact }}
env:
  GH_TOKEN: ${{ github.token }}
jobs:
  check-build:
    runs-on: ${{ inputs.runs-on }}
    outputs:
      is_failure: ${{ steps.check-build.outputs.is_failure }}
      run_url: ${{ steps.check-build.outputs.run_url }}
      has_artifact: ${{ steps.verify-build.outputs.has_artifact }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/aarch64
        if: ${{ inputs.architecture == 'linux-aarch64' }}
      - name: Checkout the repo with the script
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install DuckDB for Python
        shell: bash
        if: 
        run: |
          python -m pip install --upgrade pip
          pip install duckdb --pre --upgrade
      - name: Install qemu dependencies
        if: ${{ inputs.architecture == 'linux-aarch64' }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y libc6-arm64-cross qemu-user-static

      - name: Get run url ${{ inputs.nightly-build }}
        id: check-build
        shell: bash
        run: |
          echo "Listing ${{ inputs.nightly-build }} runs..."
          gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --json conclusion,url,name,createdAt,databaseId,headSha > ${{ inputs.nightly-build }}.json 
          url=$(python -c "import duckdb; print(duckdb.sql(f\"SELECT url FROM read_json('${{ inputs.nightly-build }}.json') ORDER BY createdAt DESC LIMIT 1;\").fetchone()[0])")
          echo "run_url=$url" >> $GITHUB_OUTPUT
      
      - name: Check is ${{ inputs.nightly-build }} build conclusion
        shell: bash
        run: |
          conclusion=$(python -c "import duckdb; print(duckdb.sql(f\"SELECT conclusion FROM read_json('${{ inputs.nightly-build }}.json') ORDER BY createdAt DESC LIMIT 1;\").fetchone()[0])") 
          echo $conclusion ðŸ¦‹
          if [ $conclusion == 'success' ]; then
            echo "is_failure=false" >> $GITHUB_OUTPUT
          else
            echo "is_failure=true" >> $GITHUB_OUTPUT
            echo "Counting consecutive failures..."
            python scripts/count_consecutive_failures.py ${{ inputs.nightly-build }}.json --nightly_build ${{ inputs.nightly-build }} --architecture ${{ inputs.architecture }} --url ${{ steps.check-build.outputs.run_url }}
          fi
          echo $is_failure ðŸ¦‘
      - name: Verify ${{ inputs.nightly-build }} version
        if: inputs.nightly-build != 'Python'
        id: verify-build
        shell: bash
        run: |
          run_id=$(python -c "import duckdb; print(duckdb.sql(f\"SELECT databaseId FROM read_json('${{ inputs.nightly-build }}.json') ORDER BY createdAt DESC LIMIT 1;\").fetchone()[0])")
          echo "Found run_id: $run_id"
        
          if [[ '${{ inputs.architecture }}' == 'linux-aarch64' ]]; then
            name="${{ inputs.architecture }}"
          else 
            name="${{ inputs.platform }}"
          fi

          echo "Downloading duckdb-binaries-$name artifact..."
          if gh run download $run_id --repo duckdb/duckdb -n duckdb-binaries-$name; then
            echo "Artifact duckdb-binaries-$name is successfuly downloaded."
            unzip duckdb_cli-${{ inputs.architecture }}.zip
            
            echo "Verifying version..."
            full_sha=$($duckdb -csv -noheader -c "SELECT headSha FROM read_json('${{ inputs.nightly-build }}.json') ORDER BY createdAt DESC LIMIT 1;")
            if [[ ${{ inputs.architecture }} == linux-aarch64 ]]; then
              tmp_sha=$(docker run --rm --platform linux/aarch64 -v $(pwd):/duckdb -e full_sha=$full_sha ubuntu:22.04 /bin/bash -c 'cd /duckdb; ./duckdb --version')
            else
              tmp_sha=$(./duckdb --version)
            fi
            short_sha=$(echo $tmp_sha | awk -F' ' "{ print $2 }")
            if [[ "$full_sha" != "$short_sha"* ]]; then
              printf "- The version of \`${{ inputs.nightly-build }}\` build (\`$short_sha\`) doesn't match to the version triggered the build (\`$full_sha\`).\n " > issue_body_${{ inputs.architecture }}.txt
              cat issue_body_${{ inputs.architecture }}.txt
              exit 1
            fi
          else  
            echo Downloading duckdb-binaries-$name artifact is failed.
            printf "#### No artifacts with name duckdb-binaries-$name provided.\n" > issue_body_${{ inputs.architecture }}.txt
            echo "has_artifact=false" >> $GITHUB_OUTPUT
            echo "$has_artifact"
          fi
          echo "has_artifact=true" >> $GITHUB_OUTPUT
      - name: Upload issue
        uses: actions/upload-artifact@v4
        with:
          name: issue_body_${{ inputs.architecture }}
          path: issue_body_${{ inputs.architecture }}.txt
      - name: Upload build
        if: steps.verify-build.outputs.has_artifact == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: duckdb_cli-${{ inputs.architecture }}
          path: duckdb_cli-${{ inputs.architecture }}.zip