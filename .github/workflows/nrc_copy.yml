name: Check Nightly Builds Check (Reusable) AARCH64
on:
  workflow_call:
    inputs:
      nightly-build:
        required: true
        type: string
      platform: 
        required: false
        type: string
      architecture: 
        required: true
        type: string
      runs-on:
        required: true
        type: string
    outputs:
      is_failure: 
        description: "Stores nightly-build's conclusion: 'success' or 'failure'."
        value: ${{ jobs.check-build.outputs.is_failure }}
      has_artifact: 
        description: "If there is an expected artifact, stores 'true'."
        value: ${{ jobs.check-build.outputs.has_artifact }}
        
env:
  GH_TOKEN: ${{ github.token }}
jobs:
  check-build:
    runs-on: ${{ inputs.runs-on }}
    outputs:
      is_failure: ${{ steps.check-build.outputs.is_failure }}
      has_artifact: ${{ steps.verify-build.outputs.has_artifact }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        if: ${{ inputs.architecture == 'linux-aarch64' }}
      - name: Checkout the repo with the script
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install duckdb
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install duckdb --pre --upgrade

      - name: Check ${{ inputs.nightly-build }}
        id: check-build
        shell: bash
        run: |
          gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json conclusion
          conclusion=$(gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json conclusion) 
          if echo $conclusion | grep -q 'failure'; then
            gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json url > url.csv
            url=$(tail -n 1 url.csv | awk -F "[:}]" '{ print $3 }')
            echo "is_failure=failure" >> $GITHUB_OUTPUT
            
            echo Listing ${{ inputs.nightly-build }} runs...
            gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --json conclusion,url,name,startedAt > ${{ inputs.nightly-build }}.json
            
            echo Counting consecutive failures...
            python scripts/count_consecutive_failures.py ${{ inputs.nightly-build }}.json --nightly_build ${{ inputs.nightly-build }} --architecture ${{ inputs.architecture }}
            if [[ $? == 1 ]]; then
              echo "is_failure=failure" >> $GITHUB_OUTPUT
            fi
          fi
      
      # - name: Setup upterm session
      #   uses: owenthereal/action-upterm@v1
        # Version verification for Python performs in .github/workflows/python_nbc.yml
      
      - name: Verify ${{ inputs.nightly-build }} version
        if: inputs.nightly-build != 'Python'
        id: verify-build
        shell: bash
        run: |
          gh run list --repo duckdb/duckdb --event repository_dispatch --workflow ${{ inputs.nightly-build }} --created $(date +%Y-%m-%d) --json databaseId > run_id.csv
          run_id=$(tail -n 1 run_id.csv | awk -F "[:}]" '{ print $2 }' | tr -d ' "')
          echo Found run_id: $run_id
        
          # echo Listing all artifacts...
          # gh api repos/duckdb/duckdb/actions/runs/$run_id/artifacts --jq '.artifacts[].name'
        
          echo Downloading duckdb-binaries-${{ inputs.platform }} artifact...
          if [[ ${{ inputs.architecture }} == 'linux-aarch64' ]]; then
            name=${{ inputs.platform }}
          else 
            name=${{ inputs.architecture }}
          fi
          if gh run download $run_id --repo duckdb/duckdb -n duckdb-binaries-$name; then
            echo Artifact duckdb-binaries-${{ inputs.platform }} is successfuly downloaded.
            echo "has_artifact=true" >> $GITHUB_OUTPUT
            unzip duckdb_cli-${{ inputs.architecture }}.zip
            
            echo Verifying version...
            ./duckdb --version > pragma_version.csv
            short_sha=$(tail -n 2 pragma_version.csv | awk '{ print $2 }')
            full_sha=$(gh run view $run_id --repo duckdb/duckdb --json headSha -q .headSha)
            echo $short_sha
            echo $full_sha
            echo Build version matches to the version triggered the nightly-build workflow
            if [[ $full_sha != $short_sha* ]]; then
              printf "- The version of \`${{ inputs.nightly-build }}\` build (\`$short_sha\`) doesn't match to the version triggered the build (\`$full_sha\`).\n " > issue_body_${{ inputs.architecture }}.txt
              cat issue_body_${{ inputs.architecture }}.txt
              exit 1
            fi
          else  
            echo Downloading duckdb-binaries-${{ inputs.platform }} artifact is failed.
            printf "#### No artifacts with name duckdb-binaries-${{ inputs.platform }} provided.\n " > issue_body_${{ inputs.architecture }}.txt
            echo "has_artifact=false" >> $GITHUB_OUTPUT
            echo $has_artifact
          fi
      
      - name: Upload issue
        if: steps.check-build.outputs.is_failure == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: issue_body_${{ inputs.architecture }}
          path: issue_body_${{ inputs.architecture }}.txt

      - name: Upload build
        if: steps.verify-build.outputs.has_artifact == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: duckdb_cli-${{ inputs.architecture }}
          path: duckdb_cli-${{ inputs.architecture }}.zip
