name: OUTSIDE MTRX
on:
  workflow_dispatch:

jobs:
  configure:
    name: Configure mount and download benchmark data
    runs-on: ubuntu-latest
    steps:
      - run: exit 0

  build:
    name: Build DuckDB versions and link the benchmarks
    needs: 
      - configure
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: ["main", "feature"]
    steps:
      - name: Run
        run: |
          if [[ ${{ matrix.branch }} == main ]]; then
            exit 1
          else 
            exit 0
          fi

  run-tests:
    name: Run Regression Tests
    # if: success() - will skip all other tests if one fails
    if: always() && (needs.configure['main'].result == 'success' && needs.build['main'].result == 'success' || needs.configure['feature'].result == 'success' && needs.build['feature'].result == 'success')
    needs: 
      - configure
      - build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test: ['large/tpch.csv', 'tpcds.csv', 'large/ingestion.csv', 'micro_extended.csv']
        branch: ["main", "feature"]
    outputs:
      file_name: ${{ steps.create.outputs.file_name }}
        
    steps:
      - name: Check if the build succeeded for this branch
        if: needs.build.result == 'success' && needs.configure.result == 'success'
        run: echo "Running tests for successful build on branch ${{ matrix.branch }}"
      - name: Run Regression Test
        if: contains(${{ steps.create.outputs.file_name }}, 'regression')
        continue-on-error: true
        shell: bash
        run: |
          echo TEST: ${{ matrix.test }}
          if [[ ${{ matrix.test }} == tpcds.csv ]]; then
            echo 🐠 ${{ matrix.branch }}
            exit 1
          fi
  
  file-issue:
    name: File Issue
    needs: 
      - configure
      - build
      - run-tests
    if: always()
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: ["main", "feature"]

    steps:
      - name: File issue on preparation steps
        if: contains(github.ref_name, 'main') && (needs.configure.result != 'success' || 
            needs.build.result != 'success')
        run: |
          echo PREP STEP ISSUE

      - name: File issue on Benchmarks
        if: contains(github.ref_name, 'main')
        run: |
          # get versions
          echo GET VERSIONS

          # collect failures on benchmarks runs
          echo REGRESSION DETECTED >> issue_body_${{ matrix.branch }}.txt
      
          if grep -q "REGRESSIONS DETECTED" issue_body_${{ matrix.branch }}.txt; then
            echo "Regressions detected on ${{ matrix.branch }}, GitHub issue will be filed."
            # create issue
            echo CREATE ISSUE on branch ${{ matrix.branch }} ✅
            # notify next run that it should not update duckdb-old-${{ matrix.branch }}
            echo "touch ~/previous_failed_${{ matrix.branch }}.txt"
          else
            echo "No regressions detected on branch ${{ matrix.branch }} ⚛️"
            echo "rm -f ~/previous_failed_${{ matrix.branch }}.txt"
          fi
  send-issue:
    if: always()
    needs:
      - configure
      - build
      - run-tests
      - file-issue
    runs-on: ubuntu-latest
    steps:
     - name: Send issue to GH
       shell: bash
       run: |
         echo $(cat issue_body*.txt >> report.txt)
          cat report.txt
